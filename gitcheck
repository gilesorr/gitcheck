#!/usr/bin/env python3
"""
    Filename: gitcheck
    Author:   Giles Orr, gilesorr at gmail dot com
    Purpose:  Report the current status of your git repositories.  If
              requested, it can also report their status with respect to
              their remote.

              Includes a way to find and generate a list of repos.

    There IS a git library for Python, but it's not currently a standard
    library.  I need few enough functions that I'm going to continue
    without it, but it's something to keep in mind.

"""

import argparse # for command line parsing
from collections import OrderedDict # for our ORDERED collection of repos
import configparser # for reading in the config
from distutils.spawn import find_executable # to search for "locate" executable
import os
import os.path
from os.path import expanduser # find the user's home directory
import subprocess # run system commands
import sys
import time # how old is the config file?
import datetime # for datestamp

#####################################################################
#                            SETTINGS
#####################################################################
#
# Global variables! (Fair warning):

# Version:
VERSION = "0.3"
VERSIONDATE = "2016"
URL = "https://github.com/gilesorr/gitcheck"
AUTHORS = "Giles Orr"

# http://stackoverflow.com/questions/4028904/how-to-get-the-home-directory-in-python
# Find the user's home directory (should be OS-neutral?):
homedir = expanduser("~")

# Set a (global) directory separator (one of the few parts of this that
# might work cross-platform):
DIRSEP=os.pathsep

# Set timestamp and datestamp:
DATEFORMAT = "%Y-%m-%d"
TIMEFORMAT = "%H%M.%S"
DATESTAMP  = datetime.datetime.now().strftime(DATEFORMAT)
TIMESTAMP  = datetime.datetime.now().strftime(TIMEFORMAT)

#########################################################################
#                    Default (Global) Colours
#########################################################################
# And some colours for statuses to make our life pretty.
# Another global variable (dictionary).  Got to love it.
# Use "" as the empty default.  User colours are set later.

Colours = {
    'white'  : '\033[97m',
    'cyan'   : '\033[96m',
    'pink'   : '\033[95m',
    'blue'   : '\033[94m',
    'green'  : '\033[92m',
    'yellow' : '\033[93m',
    'red'    : '\033[91m',
    'gray'   : '\033[90m',

    'bggray'  : '\033[1;47m',
    'bgcyan'  : '\033[1;46m',
    'bgpink'  : '\033[1;45m',
    'bgblue'  : '\033[1;44m',
    'bgbrown' : '\033[1;43m',
    'bggreen' : '\033[1;42m',
    'bgred'   : '\033[1;41m',
    'bgblack' : '\033[1;40m',

    'endcolours' : '\033[0m',
    'underline'  : '\033[4m',
    'bold'       : '\033[1m',

    'nocolour'   : '' # needed an empty value (not a terminator, so not "endcolours")
    }


#########################################################################
#                    Default User Colours (Global)
#########################################################################
#
# These are defaults (and global!): we'll read in the config and override
# them with the user's choices later (see set_usercolours()).

User_Colours = {
        # Local statuses:
        "CLEAN"    : "",                  # clean - local
        "MOD"      : Colours["green"],    # modified - local
        "STAGE"    : Colours["yellow"],   # staged - local
        "UNTRACK"  : Colours["blue"],     # untracked - local
        "CONFLICT" : Colours["red"],      # conflicted - local
        # Remote statuses:
        "NOREM"    : Colours["nocolour"], # no remote - remote
        "BEHIND"   : Colours["pink"],     # behind - remote
        "AHEAD"    : Colours["pink"],     # ahead - remote
        "UPTODATE" : Colours["nocolour"], # up to date - remote
        # If you want to colourize the repository name or branch name:
        "REPO"     : Colours["nocolour"],
        "BRANCH"   : Colours["nocolour"],
        # For problems spotted by the program (currently just "not-a-repository"):
        "WARNING"  : Colours["bgred"]   + Colours["white"]
        }


#########################################################################
#                          Gitrepo class
#########################################################################

class Gitrepo:
    """
    A class that represents a local git repo.  The incoming "repodir"
    variable is a local folder name.  "remotes_bool" answers the question
    "do I check the remotes?"

    Properties:
    - repodir
    - local_status:  clean/modified/staged/untracked
    - remote_status: no remote/up to date/ahead/behind (can be both of
      these)
    - remote_uri
    - branch
    """
    def __init__(self, repodir, remotes_bool):
        self.repodir       = repodir
        self.is_repo       = True # wanted a value, setting default True isn't ideal ...
        self.local_status  = []
        self.remote_status = []
        self.remote_uri    = []
        self.remotes_bool  = remotes_bool # check for remotes?
        self.branch        = ""   # current branch in the repo
        self.branches      = []   # all the branches in the repo
        self.clean         = True # ANY status not "clean" and "up to date" should toggle this
        self.upstream_name = ""   # it's not always "origin", let's check

        # Check if the repo exists (after empty values are set: makes
        # failure more graceful):
        if not is_repo(self.repodir):
            self.is_repo = False
            self.local_status.insert(0, "not a repository")
            return None
        self.set_upstream_name()
        self.set_branches()
        self.branch = self.branches[0]
        self.set_local_status()
        if remotes_bool:
            self.remote_uri = self.check_remotes_match()
            self.set_remote_status()


    #####################################################################
    #                    Gitrepo.check_remotes_match()
    #####################################################################

    def check_remotes_match(self):
        """
        Check to see if the fetch and push URLs for the repo are the same -
        and bow out if they aren't.  Return the remote if they match.

        Originally used "git remote show origin", now switched to
        "git remote -v" as the information we need is in both and the latter
        doesn't require a network connection, making it faster if the local
        network is being sticky.

        Untested because I have no repos with unmatched remotes.
        """
        os.chdir(self.repodir)
        output = runcmd("git remote")
        if output == "":
            # There is no remote - and we're okay with that:
            return
        output = runcmd("git remote -v")
        fetch = ""
        push  = ""
        for line in output.splitlines():
            if "(fetch)" in line:
                fetch = line.split()[1]
            if "(push)"  in line:
                push  = line.split()[1]
        if fetch != push:
            print("This program was written for a very limited set of circumstances.")
            print("It doesn't know how to deal with git repos where the 'Fetch' and")
            print("'Push' URLs don't match, as in " + self.repodir)
            print("With apologies, bailing out.")
            sys.exit(4)
        return fetch


    #####################################################################
    #                    Gitrepo.set_local_status()
    #####################################################################

    def set_local_status(self):
        """
        find if repo has changed, uncommitted or unpushed files.

        The various states a repo can be in:
          clean      - everything is committed
          modified   - file(s) changed, not added or committed
          staged     - file(s) changed and staged
          untracked  - new / untracked files present
          conflicted - always a joyful time
        """
        os.chdir(self.repodir)
        output = runcmd("git status")
        for line in output.splitlines():
            if line.startswith("nothing to commit, working directory clean"):
                self.local_status.append("clean")
                # done, there should be nothing else:
                continue
            if line.startswith("Changes not staged for commit") and "modified" not in self.local_status:
                # modified but unstaged files:
                self.local_status.append("modified")
                self.clean = False
            if line.startswith("Changes to be committed") and "staged" not in self.local_status:
                # staged files
                self.local_status.append("staged")
                self.clean = False
            if "ntracked files" in line and "untracked" not in self.local_status:
                # new/untracked files - dubious territory, but I'm reporting
                # because they could have added it to .gitignore:
                self.local_status.append("untracked")
                self.clean = False
            if "nmerged path" in line and "conflicted" not in self.local_status:
                # or "both modified" (ah, no, the latter can also be "both
                # added", where "Unmerged paths" applies to both).
                self.local_status.append("conflicted")
                self.clean = False

    #####################################################################
    #                  Gitrepo.set_remote_status():
    #####################################################################

    def set_remote_status(self):
        """
        Determine the relationship of the repo to its remote.

        Process:
        1) grab output of "git remote show origin":
        2) grep "fatal: 'origin' does not appear to be a git repository"
           means the repo doesn't have a remote
        3) grep "local out of date" is behind origin
        4) grep "fast-forwardable" ahead of origin
        5) grep "up to date" you're good
        """
        os.chdir(self.repodir)
        # we check this first because the second command doesn't exit cleanly
        # if there aren't remotes:
        output = runcmd("git remote")
        if output == "":
            # There is no remote
            self.remote_status.append("no remote")
        else:
            if self.remotes_bool: # user has requested we check for remotes:
                output = runcmd("git remote show " + self.upstream_name)
                for line in output.splitlines():
                    if "does not appear to be a git repository" in line and "no remote" not in self.remote_status:
                        self.remote_status.append("no remote")
                        # done, there should be nothing else:
                        continue

                    # I looked at RE matching for this test, but none of
                    # "\b", "\W", or "\s" was exactly what was needed: this
                    # is simpler, faster, and - amazingly - better:
                    if self.branch in line and line.split()[0].strip() in self.branch:
                        if "local out of date" in line and "behind" not in self.remote_status:
                            # local repo is behind the remote
                            self.remote_status.append("behind")
                            self.clean = False
                        if "fast-forwardable" in line and "ahead" not in self.remote_status:
                            # local repo is ahead of the remote
                            self.remote_status.append("ahead")
                            self.clean = False
                        if "up to date" in line and "up to date" not in self.remote_status:
                            # no local or remote changes:
                            self.remote_status.append( "up to date")


    #####################################################################
    #                  Gitrepo.display_local_status():
    #####################################################################

    def display_local_status(self):
        """
        Different from get_local_status() which returns a list, this is
        meant to pretty-print the status.
        """
        if not self.is_repo:
            print(" " + User_Colours["WARNING"] + "not a repository" + Colours["endcolours"])
            return None
        output = ""
        for status in self.local_status:
            if status is "clean":
                output += User_Colours["CLEAN"]    + status + Colours["endcolours"] + " "
            if status is "modified":
                output += User_Colours["MOD"]      + status + Colours["endcolours"] + " "
            if status is "staged":
                output += User_Colours["STAGE"]    + status + Colours["endcolours"] + " "
            if status is "untracked":
                output += User_Colours["UNTRACK"]  + status + Colours["endcolours"] + " "
            if status is "conflicted":
                output += User_Colours["CONFLICT"] + status + Colours["endcolours"] + " "
        output = output.strip()
        print("[ " + output + " ]", end="")


    #####################################################################
    #                       Gitrepo.set_branches():
    #####################################################################

    def set_branches(self):
        """
        self.branches is an array.  This sets that array.  One important
        bit of behaviour, item 0 should be the current branch.
        """
        branches = []
        os.chdir(self.repodir)
        output = runcmd("git branch")
        for line in output.splitlines():
            if line.startswith('*'):
                # Current branch (make it the first item in the list):
                branches.insert(0, line.split()[1])
            else:
                # non-current branch:
                branches.append(line.strip())
        self.branches = branches


    #####################################################################
    #                       Gitrepo.set_upstream_name():
    #####################################################################

    def set_upstream_name(self):
        """
        Given the object's repo, determine what the upstream's name is.
        This is almost always "origin", but of course it's unsafe to
        assume that.  Sets self.upstream_name to the discovered value.
        """
        os.chdir(self.repodir)
        output = runcmd("git remote -v")
        if output == "":
            # There is no remote
            pass # self.upstream_name will remain as the default ""
        else:
            firstline = output.splitlines()[0]
            self.upstream_name = firstline.split()[0]


    #####################################################################
    #                  Gitrepo.display_remote_status():
    #####################################################################

    def display_remote_status(self):
        """
        Different from get_remote_status() which returns a list, this is
        meant to pretty-print the status.

        'if status is "up to date":' doesn't seem to work - anything with
        spaces fails, leading to the hack below.
        """
        if not self.is_repo:
            return None
        output = ""
        for status in self.remote_status:
            if "no" in status and "remote" in status:
                output += User_Colours["NOREM"]    + status + Colours["endcolours"] + " "
            if status is "behind":
                output += User_Colours["BEHIND"]   + status + Colours["endcolours"] + " "
            if status is "ahead":
                output += User_Colours["AHEAD"]    + status + Colours["endcolours"] + " "
            if "up" in status and "to" in status and "date" in status:
                output += User_Colours["UPTODATE"] + status + Colours["endcolours"] + " "
        output = output.strip()
        print("[ " + output + " ]", end="")

    #####################################################################
    #                  Gitrepo.__repr__():
    #####################################################################

    def __repr__(self):
        # Nobody said it would be pretty:
        return "<Gitrepo " + str(self.repodir) + " branch: " + str(self.branch) + " local status: " + str(self.local_status) + " relation to remote: " + str(self.remote_status) + ">"

    #####################################################################
    #                  Gitrepo Utilities
    #####################################################################

    def get_repo_dir(self):
        return self.repodir

    def get_local_status(self):
        return self.local_status

    def get_remote_status(self):
        return self.remote_status

    def get_current_branch(self):
        return self.branch


#####################################################################
#            runcmd(): is it a hack? I don't know
#####################################################################


def runcmd(command):
    """
    Run a (Linux?) command.

    There's probably something hideously wrong with this.  But it works
    for my limited use and saves me a fair bit of typing.
    """
    cmd = command.split()
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    # in Python2 you return output as a string: in Python3 you have to
    # convert bytes to string:
    return output.decode('utf-8')


#####################################################################
#                       Unbuffered()
#####################################################################
# my remote repos progress indicator needs to print single dots all
# on the same line, and Python is refusing:
# http://stackoverflow.com/questions/107705/disable-output-buffering

class Unbuffered(object):
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)
# and force sys.stdout to be unbuffered:
sys.stdout = Unbuffered(sys.stdout)


#####################################################################
#            list_walk(): Find git repos with os.walk
#####################################################################

def list_walk(searchdir):
    gitmatch = ".git"
    repodirs = []
    for root,dirs,files in os.walk(searchdir):
        for name in dirs:
            if name.endswith(gitmatch):
                repodirs.append(root + os.sep + name.rstrip(gitmatch))

    return repodirs


#####################################################################
#                         is_repo()
#####################################################################

def is_repo(foldername):
    """
    Given a foldername, append ".git/" and see if that's a directory.
    If it is, we assume that foldername is a git repository.

    "git status" didn't work well for this as it goes all stderr.
    """
    testfolder = foldername + "/.git/"
    if os.path.isdir(testfolder):
        return True
    else:
        return False


#####################################################################
#                    new_config_defaults()
#####################################################################

def new_config_defaults():
    """
    Used when no config file exists and a default configuration set-up
    is needed.

    Returns a config object, pre-loaded with colours and comments.
    The "Repositories" section is created and loaded with comments, but
    no actual repos.
    """

    # We need "allow_no_value" so we can write comments:
    config = configparser.ConfigParser(allow_no_value = True)
    config.optionxform = str

    config["Defaults"] = {}
    config.set("Defaults", "# WARNING! If you re-run the config generator, all comments will be wiped.")
    config.set("Defaults", "# Do you want the program to check if the config is old?")
    config["Defaults"]["RecommendUpdate"]   = "True"
    config.set("Defaults", "# How old (days) before the program starts notifying you that the config is old?")
    config["Defaults"]["RecommendInterval"] = "30"

    config["Colours"] = {}
    config.set("Colours", "# Colour choices are:")
    config.set("Colours", "#   nocolour, white, cyan, pink, blue, green, yellow, red, gray,")
    config.set("Colours", "#   bggray, bgcyan, bgpink, bgblue, bgbrown, bggreen, bgred, bgblack,")
    config.set("Colours", "#   underline, bold")
    config.set("Colours", "# Note that they're unquoted: quoting breaks the config.")
    config.set("Colours", "# What follows are the default colours.  Change them if you want.")
    config.set("Colours", "#")
    config.set("Colours", "# Repository is clean:")
    config["Colours"]["CLEAN"]      = "nocolour"
    config.set("Colours", "# The repository has modified files:")
    config["Colours"]["MOD"]        = "green"
    config.set("Colours", "# The repository has staged files:")
    config["Colours"]["STAGE"]      = "yellow"
    config.set("Colours", "# The repository has untracked files:")
    config["Colours"]["UNTRACK"]    = "blue"
    config.set("Colours", "# The repository has conflicts:")
    config["Colours"]["CONFLICT"]   = "red"
    config.set("Colours", "# There is no remote repository:")
    config["Colours"]["NOREM"]      = "nocolour"
    config.set("Colours", "# Local repository is behind the remote:")
    config["Colours"]["BEHIND"]     = "pink"
    config.set("Colours", "# Local repository is ahead of the remote:")
    config["Colours"]["AHEAD"]      = "pink"
    config.set("Colours", "# Local repository is up-to-date with the remote:")
    config["Colours"]["UPTODATE"]   = "nocolour"
    config.set("Colours", "# If you want the name of the repository coloured:")
    config["Colours"]["REPO"]       = "nocolour"
    config.set("Colours", "# If you want the name of the branch coloured:")
    config["Colours"]["BRANCH"]     = "nocolour"

    config["Repositories"] = {}
    config.set("Repositories", "# Each line should consist of a valid git repository directory followed by")
    config.set("Repositories", "# a single letter setting:")
    config.set("Repositories", "#   i - ignore")
    config.set("Repositories", "#   s - status")

    return config


#####################################################################
#                          mk_config()
#####################################################################

def mk_config(path, infile):
    """
    Creates a configuration file and writes it to stdout.

    Used to allow a choice of Python's "walk" (the default) and Unix's
    "locate", but the latter caused problems and didn't particularly help,
    so that was removed.  A Mac user recommended "mdfind" on Mac: in theory
    it would be faster there, but it randomly ignores the majority of dot
    files making it fairly useless for this.

    KNOWN ISSUE/TODO: if a config exists, configparser won't keep comments -
    it effectively purges them.  Possible solutions:
    - change config handler (non-default, would have to be downloaded)
    - re-insert comments (they would clump at section beginnings or ends)
    - back up configs each time this is run (could clutter user dirs)

    """

    # dirlistparse(...) removes duplicates and checks validity of the path
    # dirs supplied by the user, returning the shortest valid path:
    validated_user_dir_list = dirlistparse(path)
    if not validated_user_dir_list: # empty list returned
        print("Something is wrong with your provided PATH, no valid directories")
        print("found to search.")
        sys.exit(16)

    print("# Looking for git repos: this may take a while.")
    print("")

    gitdirlist = [] # list of valid git directories found
    for dir in (validated_user_dir_list):
        # list_walk(dir) recursively finds git directories in a given
        # directory:
        gitdirlist += list_walk(dir)

    if os.path.isfile(infile):
        # duplicating a few lines from read_config:
        # TODO: refactor so read_config ONLY reads the config, doesn't
        # parse it: that should be handled separately.
        repositories = OrderedDict()
        config = configparser.ConfigParser(allow_no_value = True)
        config.optionxform = str
        try:
            config.read(infile)
        except:
            # if we can't read the file, set defaults:
            config = new_config_defaults() # sets colours, comments, empty Repo section

        known_repos = []
        try:
            for key in config["Repositories"]:
                known_repos.append(key)
            # apparently the efficiency of "in" isn't great, but to beat that
            # I'd need to convert to sets ... and then convert back.  Not worth
            # it if we're not hitting thousands of repos:
            new_repos = [ repo for repo in gitdirlist if repo not in known_repos]
            if new_repos: # ie. the list isn't empty
                update_string = "# New repos found " + DATESTAMP + ":"
                config.set("Repositories", update_string)
            else:
                update_string = "# No new repos found " + DATESTAMP
                config.set("Repositories", update_string)
        except: # we have a mangled config file
            config = new_config_defaults() # sets colours, comments, empty Repo section
            new_repos = gitdirlist
    else:
        config = new_config_defaults() # sets colours, comments, empty Repo section
        new_repos = gitdirlist

    for dir in new_repos:
        config["Repositories"][dir] = "i"

    config.write(sys.stdout)


#####################################################################
#                      dirlistparse
#####################################################################

def dirlistparse(dirstring):
    """
    Given a Unix-PATH-like string of colon-separated directories, returns
    a list of valid directories:
    - disambiguates softlinks
    - eliminates dirs that are subdirs of other named entries
    - eliminates entries that don't exist
    """

    baselist = dirstring.split(DIRSEP)
    expandlist = []
    for maybedir in baselist:
        testdir = os.path.realpath(os.path.expanduser(maybedir.rstrip("/")))
        if os.path.isdir(testdir):
            if not expandlist: # ie. the list is empty:
                expandlist.append(os.path.expanduser(maybedir.rstrip("/")))
            # don't want to be looping and modifying a list at the same time:
            copylist = expandlist.copy()
            add = True
            for prevdir in copylist:
                # Check that a subdir of this dir isn't already on the list
                # - and that this isn't a subdir of something already on
                # the list.
                #
                # Since I'm pulling up the names supplied by the user, I
                # also have to expand them again:
                prevdir = os.path.realpath(prevdir)
                if testdir == prevdir:
                    # Already on the list:
                    add = False
                elif testdir.find(prevdir) == 0:
                    # don't add testdir, because prevdir is a parent:
                    add = False
                elif prevdir.find(testdir) == 0:
                    # remove prevdir and add testdir because prevdir is a subdir:
                    expandlist.remove(prevdir)
                    # retain the name they used, but with "~" expanded:
                    add = True
            if add:
                expandlist.append(os.path.expanduser(maybedir.rstrip("/")))
        else:
            print("'" + maybedir + "' doesn't appear to be a valid directory and won't be used.")
    return expandlist


#####################################################################
#                          Read config file
#####################################################################

def read_config(infile):
    """
    Given the location of the configuration file, create and return
    a list of ordered dictionaries, each dictionary being one of the
    sections in the config file:

    [ {usercolours}, {repositories} ]

    Where "usercolours" and "repositories" are UNCHECKED dictionaries, ie.
    we've read the values in but not confirmed they're usable.

    config.items returns [(a, b), (c, d), ...] - a list of two-tuples,
    not a dictionary, which would have been sane.  Although it is
    "dictionary-like".  So I have to convert from that form to dictionary.

    "repositories" has each element of the form ('/home/giles/.vim/', 's'),
    ie. two-tuples when I meant them to be a dict.  "usercolours" is an
    actual dict, with elements like this:
    {'REPO': 'nocolour', 'AHEAD': 'pink', 'BRANCH': 'nocolour', etc.}

    configparser defaults to lower-casing all key values.  As I'm reading
    in directory names, we needed a fix: so "config.optionxform = str".

    https://docs.python.org/3/library/configparser.html
    """

    usercolours = {}
    repositories = OrderedDict()
    config = configparser.ConfigParser()
    config.optionxform = str
    try:
        config.read(infile)
    except:
        print("Problems reading the config file.  It's recommended you regenerate")
        print("the config: run '" + os.path.basename(sys.argv[0]) + " -h' to figure out how.  Exiting.")
        sys.exit(1)

    # time.time() is now, in seconds since the millennium
    # os.stat(string-filename).st_mtime is the age of the file in seconds
    # since the millennium.
    # Age of file in seconds:
    age_of_file_s = time.time() - os.stat(infile).st_mtime

    try:
        # Comparison necessary because it comes in as a string ...
        if config["Defaults"]["RecommendUpdate"] in ["yes", "true", "True"]:
            check_config_age = True
        else:
            check_config_age = False
    except KeyError: # Occurs if there's no [Defaults] section in the config:
        # Check it if they didn't set a value:
        check_config_age = True

    try:
        check_days = int(config["Defaults"]["RecommendInterval"])
    except KeyError: # Occurs if there's no [Defaults] section in the config:
        # set a default value if they didn't set one:
        check_days = 30

    if check_config_age:
        if age_of_file_s > (60 * 60 * 24 * check_days):
            print("** Config file more than " + str(check_days) + " days old: recommended you regenerate your configuration file with '-c PATH'.")


    for key in config["Colours"]: # the [Colours] section in the config
        usercolours[key] = config["Colours"][key]

    for key in config["Repositories"]: # the [Repositories] section in the config
        repositories[key] = config["Repositories"][key]

    return [ usercolours, repositories ]


#####################################################################
#                       set_usercolours()
#####################################################################

def set_usercolours(coldict):
    """
    Given the colours from the config file, check if they're valid.
    If they are, override the global colour values.
    """
    # translate between incoming values and existing ones
    for key in User_Colours:
        # This means that if a colour type isn't defined in User_Colours,
        # it will never be checked for.  Probably reasonable ...
        try:
            User_Colours[key] = Colours[coldict[key]]
        except:
            # if the key doesn't exist, leave the setting alone:
            pass


def parse_repos(repo_dict, remotes):
    """
    Given a dictionary of repositories from the config file, return a list
    of Gitrepos() for the repos (keys) that have a value of "s" ("status")
    as opposed to "i" ("ignore").

    """
    status_repos = [] # list of folder names (strings) that the user wants checked
    repos = [] # list of Gitrepo() objects to return
    for key in repo_dict:
        if not repo_dict[key] == "i":
            status_repos.append(key)
    if remotes: # tell them how many remote repos to check
        print(str(len(status_repos)) + " remote repos to check: ", end="")
    for repo in status_repos:
        repos.append(Gitrepo(repo, remotes))
        if remotes: # let the user know how it's progressing
            print(".", end="")
    if remotes:
        print("") # terminate the status update line
    return repos


#####################################################################
#                       show_version()
#####################################################################

def show_version():
    print(os.path.basename(sys.argv[0]) + " version " + str(VERSION) + ", " + str(VERSIONDATE))
    print(str(URL))
    print("by " + str(AUTHORS))


#####################################################################
#
#                           Main
#
#####################################################################

if __name__ == '__main__':

    # OPTIONS!
    parser = argparse.ArgumentParser(description="Check the status of local git repositories.")
    parser.add_argument("-r", "--remote", action="store_true", help="check repository status with respect to remotes (if they exist)")
    # "metavar" required to force a name on the param, otherwise argparse
    # calls it "CONFIG" - thanks stackoverflow!
    parser.add_argument("-c", "--config",
            help="Generate a config file to standard out: provide a Unix-style colon-separated PATH, ie. '~' or '/opt/:/home/linux'.  Read 'Known Issues' in the README before overwriting an existing config file.",
            nargs=1,
            metavar=("PATH"))
    parser.add_argument("-n", "--nocolours", action="store_true", help="disable all colours in the output")
    parser.add_argument("-a", "--showall", action="store_true", help="shows all repositories, even if they're clean and up to date")
    parser.add_argument("-v", "--version", action="store_true", help="shows the current version of the script")
    args = parser.parse_args()

    if args.version:
        show_version()
        sys.exit(0)

    dirlist = []
    conffile = homedir + os.sep + "." + os.path.basename(sys.argv[0]) + ".conf"

    if args.config:
        mk_config(args.config[0], conffile)
        # don't do anything else if this option is selected:
        sys.exit(0)

    if os.path.isfile(conffile):
        # there's a config file, read it in
        config_colours, config_repos = read_config(conffile)
        # got the user's desired colours: see if they actually work:
        set_usercolours(config_colours)
        # got the repo list, strip it down to those we'll check (we send
        # in a dictionary, get a list of Gitrepos() out):
        try:
            repos = parse_repos(config_repos, args.remote)
        except KeyboardInterrupt:
            # likeliest point at which the process will be interrupted by a
            # Ctrl-C.  Catch and exit cleanly.
            print("")
            sys.exit(8)
    else:
        print("Cannot find configuration file " + conffile + " .")
        print("Generate it with:")
        print("    " + sys.argv[0] + " -c PATH > " + conffile)
        print("Then edit the file according to the directions inside it.")
        sys.exit(1)

    if args.nocolours:
        for colour in User_Colours:
            # override all colours, eliminate escape codes:
            User_Colours[colour] = Colours["nocolour"]
        # have to kill this one too:
        Colours["endcolours"] = Colours["nocolour"]

    for repo in repos:
        if args.showall or not repo.clean:
            print(User_Colours["REPO"] + repo.get_repo_dir() + Colours["endcolours"], end=" ")
            if repo.is_repo:
                print("branch:" + User_Colours["BRANCH"] +repo.get_current_branch() + Colours["endcolours"] + " ", end=" ")
            if args.remote:
                if repo.is_repo:
                    repo.display_remote_status()
            # this prints warning if it's not a repo, so always run it:
            repo.display_local_status()
            print("")

