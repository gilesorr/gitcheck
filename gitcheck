#!/usr/bin/env python3
"""
    Filename: gitcheck
    Purpose:  Report the current local status (working on remote) of all
              your git repositories under your home directory.

              Includes a way to find and generate a list of repos.

    There IS a git library for Python, but it's not currently a standard
    library.  I need few enough functions that I'm going to continue
    without it, but it's something to keep in mind.

"""

import argparse # for command line parsing
from collections import OrderedDict # for our ORDERED collection of repos
import configparser # for reading in the config
from distutils.spawn import find_executable # to search for "locate" executable
import os
import os.path
from os.path import expanduser
from shutil import copyfile
import subprocess
import sys
import tempfile # not sure I'm still using this?

#####################################################################
#                            SETTINGS
#####################################################################
#
# These should be in the config file.
#
# They're not used yet.  At all.
#
# Global variables! (Fair warning):

# Should this executable recommend you update the config file if it's old?
RECOMMEND_UPDATE = True
# How old should the file be before the recommendations start?
# Would be much better in days ...
# 86400s = 1 day, 604800s = 1 week, 18144000s = 30 days
RECOMMEND_INTERVAL = 18144000

# http://stackoverflow.com/questions/4028904/how-to-get-the-home-directory-in-python
# Find the user's home directory (should be OS-neutral?):
homedir = expanduser("~")


#########################################################################
#                    Default (Global) Colours
#########################################################################
# And some colours for statuses to make our life pretty.
# Another global variable (dictionary).  Got to love it.
# Use "" as the empty default.  User colours are set later.

Colours = {
    'white'  : '\033[97m',
    'cyan'   : '\033[96m',
    'pink'   : '\033[95m',
    'blue'   : '\033[94m',
    'green'  : '\033[92m',
    'yellow' : '\033[93m',
    'red'    : '\033[91m',
    'gray'   : '\033[90m',

    'bggray'  : '\033[1;47m',
    'bgcyan'  : '\033[1;46m',
    'bgpink'  : '\033[1;45m',
    'bgblue'  : '\033[1;44m',
    'bgbrown' : '\033[1;43m',
    'bggreen' : '\033[1;42m',
    'bgred'   : '\033[1;41m',
    'bgblack' : '\033[1;40m',

    'endcolours' : '\033[0m',
    'underline'  : '\033[4m',
    'bold'       : '\033[1m',

    'nocolour'   : '' # needed an empty value (not a terminator, so not "endcolours")
    }


#########################################################################
#                    Default User Colours
#########################################################################
#
# These are defaults (and global!): we'll read in the config and override
# them with the user's choices later (see set_usercolours()).

User_Colours = {
        # Local statuses:
        "CLEAN"    : "",                  # clean - local
        "MOD"      : Colours["green"],    # modified - local
        "STAGE"    : Colours["yellow"],   # staged - local
        "UNTRACK"  : Colours["blue"],     # untracked - local
        "CONFLICT" : Colours["red"],      # conflicted - local
        # Remote statuses:
        "NOREM"    : Colours["nocolour"], # no remote - remote
        "BEHIND"   : Colours["pink"],     # behind - remote
        "AHEAD"    : Colours["pink"],     # ahead - remote
        "UPTODATE" : Colours["nocolour"], # up to date - remote
        # If you want to colourize the repository name or branch name:
        "REPO"     : Colours["nocolour"],
        "BRANCH"   : Colours["nocolour"],
        # For problems spotted by the program (currently just "not-a-repository"):
        "WARNING"  : Colours["bgred"]   + Colours["white"]
        }


#########################################################################
#                          Gitrepo class
#########################################################################

class Gitrepo:
    """
    A class that represents a local git repo.  The incoming "repodir"
    variable is a local folder name.  "remotes_bool" answers the question
    "do I check the remotes?"

    Properties:
    - repodir
    - local_status:  clean/modified/staged/untracked
    - remote_status: no remote/up to date/ahead/behind (can be both of
      these)
    - remote_uri
    - branch
    """
    def __init__(self, repodir, remotes_bool):
        self.repodir       = repodir
        self.is_repo       = True # wanted a value, setting default True isn't ideal ...
        self.local_status  = []
        self.remote_status = []
        self.remote_uri    = []
        self.remotes_bool  = remotes_bool
        self.branch        = ""
        self.branches      = []
        self.clean         = True # ANY status not "clean" and "up to date" should toggle this

        # Check if the repo exists (after empty values are set: makes
        # failure more graceful):
        if not is_repo(self.repodir):
            self.is_repo = False
            self.local_status.insert(0, "not a repository")
            return None
        self.branch = current_branch_name(self.repodir)
        self.set_local_status()
        if remotes_bool:
            self.remote_uri = self.check_endpoint()
            self.set_remote_status()

    #####################################################################
    #                    Gitrepo.check_endpoint()
    #####################################################################

    def check_endpoint(self):
        """
        Badly named: check to see if the Fetch and Push URLs for the
        repo are the same - and bow out if they aren't.  Return the endpoint
        if they match.

        Untested because I have no repos with unmatched endpoints.
        """
        os.chdir(self.repodir)
        output = runcmd("git remote")
        if output == "":
            # There is no remote - and we're okay with that:
            return
        output = runcmd("git remote show origin")
        fetch = ""
        push  = ""
        for line in output.splitlines():
            if "Fetch URL:" in line:
                fetch = line.split()[2]
            if "Push  URL:" in line: # note problematic extra space ...
                push  = line.split()[2]
        if fetch != push:
            print("This program was written for a very limited set of circumstances.")
            print("It doesn't know how to deal with git repos where the 'Fetch' and")
            print("'Push' URLs don't match, as in " + self.repodir)
            print("With apologies, bailing out.")
            sys.exit(8)
        return fetch

    #####################################################################
    #                    Gitrepo.set_local_status()
    #####################################################################

    def set_local_status(self):
        """
        find if repo has changed, uncommitted or unpushed files.

        The various states a repo can be in:
          clean      - everything is committed
          modified   - file(s) changed, not added or committed
          staged     - file(s) changed and staged
          untracked  - new / untracked files present
          conflicted - always a joyful time
        """
        os.chdir(self.repodir)
        output = runcmd("git status")
        for line in output.splitlines():
            if line.startswith("nothing to commit, working directory clean"):
                self.local_status.append("clean")
                # done, there should be nothing else:
                continue
            if line.startswith("Changes not staged for commit") and "modified" not in self.local_status:
                # modified but unstaged files:
                self.local_status.append("modified")
                self.clean = False
            if line.startswith("Changes to be committed") and "staged" not in self.local_status:
                # staged files
                self.local_status.append("staged")
                self.clean = False
            if "ntracked files" in line and "untracked" not in self.local_status:
                # new/untracked files - dubious territory, but I'm reporting
                # because they could have added it to .gitignore:
                self.local_status.append("untracked")
                self.clean = False
            if "nmerged path" in line and "conflicted" not in self.local_status:
                # or "both modified" (ah, no, the latter can also be "both
                # added", where "Unmerged paths" applies to both).
                self.local_status.append("conflicted")
                self.clean = False

    #####################################################################
    #                  Gitrepo.set_remote_status():
    #####################################################################

    def set_remote_status(self):
        """
        Determine the relationship of the repo to its remote.

        Process:
        1) grab output of "git remote show origin":
        2) grep "fatal: 'origin' does not appear to be a git repository"
           means the repo doesn't have a remote
        3) grep "local out of date" is behind origin
        4) grep "fast-forwardable" ahead of origin
        5) grep "up to date" you're good
        """
        os.chdir(self.repodir)
        # we check this first because the second command doesn't exit cleanly
        # if there aren't remotes:
        output = runcmd("git remote")
        if output == "":
            # There is no remote
            self.remote_status.append("no remote")
        else:
            if self.remotes_bool: # user has requested we check for remotes:
                output = runcmd("git remote show origin")
                for line in output.splitlines():
                    if "does not appear to be a git repository" in line and "no remote" not in self.remote_status:
                        self.remote_status.append("no remote")
                        # done, there should be nothing else:
                        continue
                    if "local out of date" in line and "behind" not in self.remote_status:
                        # local repo is behind the remote
                        self.remote_status.append("behind")
                        self.clean = False
                    if "fast-forwardable" in line and "ahead" not in self.remote_status:
                        # local repo is ahead of the remote
                        self.remote_status.append("ahead")
                        self.clean = False
                    if "up to date" in line and "up to date" not in self.remote_status:
                        # no local or remote changes:
                        self.remote_status.append( "up to date")

    #####################################################################
    #                  Gitrepo.display_local_status():
    #####################################################################

    def display_local_status(self):
        """
        Different from get_local_status() which returns a list, this is
        meant to pretty-print the status.
        """
        if not self.is_repo:
            print(" " + User_Colours["WARNING"] + "not a repository" + Colours["endcolours"])
            return None
        output = ""
        for status in self.local_status:
            if status is "clean":
                output += User_Colours["CLEAN"]    + status + Colours["endcolours"] + " "
            if status is "modified":
                output += User_Colours["MOD"]      + status + Colours["endcolours"] + " "
            if status is "staged":
                output += User_Colours["STAGE"]    + status + Colours["endcolours"] + " "
            if status is "untracked":
                output += User_Colours["UNTRACK"]  + status + Colours["endcolours"] + " "
            if status is "conflicted":
                output += User_Colours["CONFLICT"] + status + Colours["endcolours"] + " "
        output = output.strip()
        print("[ " + output + " ]")

    #####################################################################
    #                  Gitrepo.display_remote_status():
    #####################################################################

    def display_remote_status(self):
        """
        Different from get_remote_status() which returns a list, this is
        meant to pretty-print the status.

        'if status is "up to date":' doesn't seem to work - anything with
        spaces fails, leading to the hack below.
        """
        if not self.is_repo:
            return None
        output = ""
        for status in self.remote_status:
            if "no" in status and "remote" in status:
                output += User_Colours["NOREM"]    + status + Colours["endcolours"] + " "
            if status is "behind":
                output += User_Colours["BEHIND"]   + status + Colours["endcolours"] + " "
            if status is "ahead":
                output += User_Colours["AHEAD"]    + status + Colours["endcolours"] + " "
            if "up" in status and "to" in status and "date" in status:
                output += User_Colours["UPTODATE"] + status + Colours["endcolours"] + " "
        output = output.strip()
        print("[ " + output + " ]")

    #####################################################################
    #                  Gitrepo.__repr__():
    #####################################################################

    def __repr__(self):
        # Nobody said it would be pretty:
        return "<Gitrepo " + str(self.repodir) + " branch: " + str(self.branch) + " local status: " + str(self.local_status) + " relation to remote: " + str(self.remote_status) + ">"

    #####################################################################
    #                  Gitrepo Utilities
    #####################################################################

    def get_repo_dir(self):
        return self.repodir

    def get_local_status(self):
        return self.local_status

    def get_remote_status(self):
        return self.remote_status

    def get_current_branch(self):
        return self.branch


#####################################################################
#            runcmd(): is it a hack? I don't know
#####################################################################


def runcmd(command):
    """
    Run a (Linux?) command.

    There's probably something hideously wrong with this.  But it works
    for my limited use and saves me a fair bit of typing.
    """
    cmd = command.split()
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0]
    # in Python2 you return output as a string: in Python3 you have to
    # convert bytes to string:
    return output.decode('utf-8')


#####################################################################
#            list_walk(): Find git repos with os.walk
#####################################################################

def list_walk(searchdir):
    gitmatch = ".git"
    repodirs = []
    for root,dirs,files in os.walk(searchdir):
        for name in dirs:
            if name.endswith(gitmatch):
                repodirs.append(root + os.sep + name.rstrip(gitmatch))

    return repodirs


#####################################################################
#            list_locate(): Find git repos with locate
#####################################################################

def list_locate(searchdir):
    gitmatch = ".git/HEAD"
    repodirs = []
    #   "locate --regex '/.git/HEAD' | grep '/home/user/'"
    output = runcmd("locate --regex " + gitmatch)
    for line in output.splitlines():
        if line.startswith(searchdir):
            repodirs.append(line.rsplit(gitmatch, 1)[0])
    return repodirs


#####################################################################
#   branch_names(): given repo, return list of branch names
#####################################################################
# The current branch name is item [0]

def branch_names(repodir):
    branches = []
    os.chdir(repodir)
    output = runcmd("git branch")
    for line in output.splitlines():
        if line.startswith('*'):
            # Current branch (make it the first item in the list):
            branches.insert(0, line.split()[1])
        else:
            # non-current branch:
            branches.append(line.strip())
    return branches


#####################################################################
#   current_branch_name(): given repo, return current branch name
#####################################################################

def current_branch_name(repodir):
    return branch_names(repodir)[0]


#####################################################################
#                         is_repo()
#####################################################################

def is_repo(foldername):
    """
    Given a foldername, append ".git/" and see if that's a directory.
    If it is, we assume that foldername is a git repository.

    "git status" didn't work well for this as it goes all stderr.
    """
    testfolder = foldername + "/.git/"
    if os.path.isdir(testfolder):
        return True
    else:
        return False


#####################################################################
#                          mk_config()
#####################################################################

def mk_config(method):
    """
    Given a method ("locate" or "walk") for locating git repositories,
    creates a configuration file and writes it to stdout.

    A Mac user recommended "mdfind" on Mac: in theory it would be faster
    there, but it randomly ignores the majority of dot files making it
    fairly useless for this.

    """

    # We need "allow_no_value" so we can write comments:
    config = configparser.ConfigParser(allow_no_value = True)
    config.optionxform = str

    config["Colours"] = {}
    config.set("Colours", "# Colour choices are:")
    config.set("Colours", "#   nocolour, white, cyan, pink, blue, green, yellow, red, gray,")
    config.set("Colours", "#   bggray, bgcyan, bgpink, bgblue, bgbrown, bggreen, bgred, bgblack,")
    config.set("Colours", "#   underline, bold")
    config.set("Colours", "# Note that they're unquoted: quoting breaks the config.")
    config.set("Colours", "# What follows are the default colours.  Change them if you want.")
    config.set("Colours", "#")
    config.set("Colours", "# Repository is clean:")
    config["Colours"]["CLEAN"]      = "nocolour"
    config.set("Colours", "# The repository has modified files:")
    config["Colours"]["MOD"]        = "green"
    config.set("Colours", "# The repository has staged files:")
    config["Colours"]["STAGE"]      = "yellow"
    config.set("Colours", "# The repository has untracked files:")
    config["Colours"]["UNTRACK"]    = "blue"
    config.set("Colours", "# The repository has conflicts:")
    config["Colours"]["CONFLICT"]   = "red"
    config.set("Colours", "# There is no remote repository:")
    config["Colours"]["NOREM"]      = "nocolour"
    config.set("Colours", "# Local repository is behind the remote:")
    config["Colours"]["BEHIND"]     = "pink"
    config.set("Colours", "# Local repository is ahead of the remote:")
    config["Colours"]["AHEAD"]      = "pink"
    config.set("Colours", "# Local repository is up-to-date with the remote:")
    config["Colours"]["UPTODATE"]   = "nocolour"
    config.set("Colours", "# If you want the name of the repository coloured:")
    config["Colours"]["REPO"]       = "nocolour"
    config.set("Colours", "# If you want the name of the branch coloured:")
    config["Colours"]["BRANCH"]     = "nocolour"

    config["Repositories"] = {}
    config.set("Repositories", "# Each line should consist of a valid git repository directory followed by")
    config.set("Repositories", "# a single letter setting:")
    config.set("Repositories", "#   i - ignore")
    config.set("Repositories", "#   s - status")

    print("# Looking for git repos: this may take a while.")
    print("")

    if method == "locate":
        dirlist = list_locate(homedir)
    else:
        dirlist = list_walk(homedir)

    for dir in dirlist:
        config["Repositories"][dir] = "i"

    config.write(sys.stdout)


#####################################################################
#                          Read config file
#####################################################################

def read_config(infile):
    """
    Given the location of the configuration file, create and return
    a list of dictionaries, each dictionary being one of the sections
    in the config file:

    [ {usercolours}, {repositories} ]

    Where usercolours and "repositories" are UNCHECKED dictionaries, ie.
    we've read the values in but not confirmed they're usable.

    config.items returns [(a, b), (c, d), ...] - a list of two-tuples,
    not a dictionary, which would have been sane.  Although it is
    "dictionary-like".  So I have to convert from that form to dictionary.

    configparser defaults to lower-casing all key values.  As I'm reading
    in directory names, we needed a fix: so "config.optionxform = str".

    https://docs.python.org/3/library/configparser.html
    """

    usercolours = {}
    repositories = OrderedDict()
    config = configparser.ConfigParser()
    config.optionxform = str
    try:
        config.read(infile)
    except:
        print("Problems reading the config file.  It's recommended you regenerate")
        print("the config: run '" + os.path.basename(sys.argv[0]) + " -h' to figure out how.  Exiting.")
        sys.exit(1)

    for key in config["Colours"]: # the [Colours] section in the config
        usercolours[key] = config["Colours"][key]

    for key in config["Repositories"]: # the [Repositories] section in the config
        repositories[key] = config["Repositories"][key]

    return [ usercolours, repositories ]


#####################################################################
#                       set_usercolours()
#####################################################################

def set_usercolours(coldict):
    """
    Given the colours from the config file, check if they're valid.
    If they are, override the global colour values.
    """
    # translate between incoming values and existing ones
    for key in User_Colours:
        # This means that if a colour type isn't defined in User_Colours,
        # it will never be checked for.  Probably reasonable ...
        try:
            User_Colours[key] = Colours[coldict[key]]
        except:
            # if the key doesn't exist, leave the setting alone:
            pass


def parse_repos(repo_dict, remotes):
    """
    Given a dictionary of repositories from the config file, return a list
    of Gitrepos() for the repos (keys) that have a value of "s" ("status")
    as opposed to "i" ("ignore").

    """
    repos = [] # list of Gitrepo() objects
    for key in repo_dict:
        if not repo_dict[key] == "i":
            repos.append(Gitrepo(key, remotes))
    return repos


#####################################################################
#
#                           Main
#
#####################################################################

if __name__ == '__main__':

    # OPTIONS!
    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--locate", action="store_true", help="use shell 'locate' command to find git repos (fast, may be up to 24 hours out of date)")
    parser.add_argument("-w", "--walk",   action="store_true", help="use Python's os.walk to find git repos (the default: slow but more accurate)")
    parser.add_argument("-r", "--remote", action="store_true", help="check repository status with respect to remotes (if they exist)")
    parser.add_argument("-c", "--config", action="store_true", help="generate a new config file to standard out")
    parser.add_argument("-n", "--nocolours", action="store_true", help="disable all colours in the output")
    parser.add_argument("-a", "--showall", action="store_true", help="shows all repositories, even if they're clean and up to date")
    args = parser.parse_args()

    if (args.locate and args.walk):
        print("The 'locate' and 'os.walk' options are exclusive.  Please choose one.")
        sys.exit(4)

    dirlist = []
    # default method of locating repositories:
    method = "walk"
    if args.locate:
        if find_executable("locate"):
            method = "locate"
        else:
            print("# Unable to find a 'locate' executable on the path, using Python's 'walk'")
    if args.walk:
        method = "walk"

    conffile = homedir + os.sep + "." + os.path.basename(sys.argv[0]) + ".conf"

    if args.config:
        mk_config(method)
        # don't do anything else if this option is selected:
        sys.exit(0)

    if os.path.isfile(conffile):
        # there's a config file, read it in
        config_colours, config_repos = read_config(conffile)
        # got the user's desired colours: see if they actually work:
        set_usercolours(config_colours)
        # got the repo list, strip it down to those we'll check (we send
        # in a dictionary, get a list of Gitrepos() out):
        repos = parse_repos(config_repos, args.remote)
    else:
        print("Cannot find configuration file " + conffile + " .")
        print("Generate it with:")
        print("    " + sys.argv[0] + " -c [-l] [-w] > " + conffile)
        print("Then edit the file according to the directions inside it.")
        sys.exit(1)

    if args.nocolours:
        for colour in User_Colours:
            # override all colours, eliminate escape codes:
            User_Colours[colour] = Colours["nocolour"]
        # have to kill this one too:
        Colours["endcolours"] = Colours["nocolour"]

    for repo in repos:
        if args.showall or not repo.clean:
            print(User_Colours["REPO"] + repo.get_repo_dir() + Colours["endcolours"], end=" ")
            if repo.is_repo:
                print("branch:" + User_Colours["BRANCH"] +repo.get_current_branch() + Colours["endcolours"] + " ", end=" ")
            # this prints warning if it's not a repo, so always run it:
            repo.display_local_status()
            if args.remote:
                if repo.is_repo:
                    print("    ", end=" ")
                    repo.display_remote_status()

